# unit testing for the fitDNM functions

import unittest
import random
import sys

try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO

IS_PYTHON3 = sys.version_info.major == 3

import pandas
from numpy import array
from numpy.random import beta, uniform, normal, seed

from fitDNM.gene_enrichment import compute_pvalue

class TestDoubleSaddlePointPy(unittest.TestCase):
    "check the primary gene enrichment function"
    
    def setUp(self):
        seed(1)
        random.seed(1)
    
    def get_de_novo_table(self):
        ''' make a file handle-like containing de novos for analysis.
        
        The ref alleles have to match those in sites generated by a random
        process (with a stable seed). This differs between python3 and python2,
        which is why this has a convuluted setup to create the text-form of the
        table.
        '''
        
        table = ['gene  chrom  pos  alt',
                'GENE1   1    1    G',
                'GENE1   1    2    T',
                'GENEX   X    2    T']
        
        # define the ref alleles depending on the python version.
        ref = ['ref', 'A', 'T', 'A']
        if IS_PYTHON3:
            ref = ['ref', 'C', 'A', 'A']
        
        # add the ref alleles to the respective strings
        table = [ '{}  {}'.format(x, ref[i])  for i, x in enumerate(table) ]
        
        return StringIO('\n'.join(table))
    
    def test_compute_pvalue(self):
        ''' compute_pvalue output is correct
        '''
        
        tab = self.get_de_novo_table()
        
        n_male = 100
        n_female = 100
        de_novos = pandas.read_table(tab, delim_whitespace=True, skipinitialspace=True)
        
        symbol = 'GENE1'
        bases = ['A', 'C', 'G', 'T']
        symbols = [symbol] * 400
        chrom = ['1'] * 400
        pos = list(range(1, 101)) * 4
        ref = [ random.choice(bases) for x in range(100) ] * 4
        alts = [ y for x in bases for y in [x] * 100 ]
        
        severity = pandas.DataFrame({'gene': symbols, 'chrom': chrom, 'pos': pos,
            'ref': ref, 'alt': alts, 'score': uniform(size=400)})
        
        mu_rate = pandas.DataFrame({'gene': symbols, 'chrom': chrom, 'pos': pos,
            'ref': ref, 'alt': alts, 'prob': 10**(normal(size=400, loc=-8, scale=0.5))})
        
        values = compute_pvalue(de_novos, n_male, n_female, symbol, severity, mu_rate)
        
        expected = {'symbol': 'GENE1', 'nsnv_o': 203.55406926527692,
            'n_sites': 100, 'n_de_novos': 2, 'scores': 1.825,
            'p_value': 1.9947054872397942e-07, 'p_unweighted': 5.3598844780382316e-06}
        
        self.assertEqual(values, expected)
