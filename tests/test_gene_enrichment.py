# unit testing for the fitDNM functions

import unittest
import sys

try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO

IS_PYTHON3 = sys.version_info.major == 3

import pandas
from numpy.random import beta, uniform, normal, seed, choice

from fitDNM.gene_enrichment import enrichment

class TestDoubleSaddlePointPy(unittest.TestCase):
    "check the primary gene enrichment function"
    
    def setUp(self):
        seed(1)
    
    def get_gene_data(self, length):
        ''' define the severity and mutation rate data for a gene
        '''
        symbol = 'GENE1'
        bases = ['A', 'C', 'G', 'T']
        consequences = ['missense', 'nonsense', 'splice_lof', 'synonymous']
        
        # make lists of data for the mutation rates and severity pandas tables
        symbols = [symbol] * length * 4
        chrom = ['1'] * length * 4
        pos = list(range(1, length + 1)) * 4
        ref = [ choice(bases) for x in range(length) ] * 4
        alts = [ y for x in bases for y in [x] * length ]
        cq = [ choice(consequences, p=(0.7, 0.05, 0.01, 0.24)) for x in range(length * 4) ]
        
        severity = pandas.DataFrame({'gene': symbols, 'chrom': chrom, 'pos': pos,
            'ref': ref, 'alt': alts, 'score': uniform(low=0, high=30, size=length * 4)})
        
        mu_rate = pandas.DataFrame({'gene': symbols, 'chrom': chrom, 'pos': pos,
            'ref': ref, 'alt': alts, 'consequence': cq,
            'prob': 10**(normal(size=length * 4, loc=-8, scale=0.5))})
        
        return symbol, severity, mu_rate
    
    def get_de_novo_table(self):
        ''' make a file handle-like containing de novos for analysis.
        
        The ref alleles have to match those in sites generated by a random
        process (with a stable seed).
        '''
        
        table = ['gene  chrom  pos  alt  ref',
                'GENE1  1      1    G     C',
                'GENE1  1      2    A     T',
                'GENEX  X      2    A     T']
        
        return StringIO('\n'.join(table))
    
    def test_enrichment(self):
        ''' enrichment output is correct
        '''
        
        tab = self.get_de_novo_table()
        
        n_male = 100
        n_female = 100
        de_novos = pandas.read_table(tab, sep='\s+', skipinitialspace=True)
        
        symbol, severity, rates = self.get_gene_data(length=100)
        
        values = enrichment(de_novos, n_male, n_female, symbol, severity, rates)
        p_value = values['p_value']
        del values['p_value']
        
        expected = {'symbol': 'GENE1', 'gene_scores': 6013.427624486824,
            'sites': 100, 'de_novos': 2, 'de_novos_score': 29.387,
            'p_unweighted': 4.526029176220055e-06}
        self.assertEqual(values, expected)
        self.assertAlmostEqual(p_value, 0.000044730946048192, delta=1e-14)
    
    def test_enrichment_zero_de_novos(self):
        ''' enrichment output is correct when the do novos are not in the
        sites covered by the rates or severity
        '''
        
        tab = self.get_de_novo_table()
        
        n_male = 100
        n_female = 100
        de_novos = pandas.read_table(tab, sep='\s+', skipinitialspace=True)
        
        symbol, severity, rates = self.get_gene_data(length=100)
        
        # shift the gene positions, so that the de novos can't match the sites
        severity['pos'] += 100
        rates['pos'] += 100
        
        values = enrichment(de_novos, n_male, n_female, symbol, severity, rates)
        
        expected = {'symbol': 'GENE1', 'gene_scores': 6013.427624486824,
            'sites': 100, 'de_novos': 0, 'de_novos_score': 0,
            'p_value': 1.0, 'p_unweighted': 1.0}
        
        self.assertEqual(values, expected)
    
    def test_enrichment_no_rates(self):
        ''' enrichment output is correct when we lack rate or severity data
        '''
        
        n_male = 100
        n_female = 100
        de_novos = pandas.read_table(self.get_de_novo_table(), sep='\s+',
            skipinitialspace=True)
        
        symbol = 'GENE1'
        severity = pandas.DataFrame(columns=['gene', 'chrom', 'pos', 'ref',
            'alt', 'score'])
        rates = pandas.DataFrame(columns=['gene', 'chrom', 'pos', 'ref',
            'alt', 'prob'])
        
        with self.assertRaises(ValueError):
            enrichment(de_novos, n_male, n_female, symbol, severity, rates)
        
